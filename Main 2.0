#include "esp_camera.h"
#include <WiFi.h>
#include <WebServer.h>

// ==================== Camera Config (AI-Thinker ESP32-CAM OV2640) ====================
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// ==================== Wi-Fi AP Settings ====================
const char* ssid = "DroneVideo";
const char* password = "12345678";

WebServer server(80);

// ==================== Adaptive Settings ====================
int jpeg_quality = 20; // 10–63
int fps = 15;          // 5–30
int range_percent = 100; // 0-100%

// last known stats for /status endpoint
float last_latency = 50.0;

// ==================== Initialize Camera ====================
void initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 35000000; // 35 MHz
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA; // 640x480 fixed
  config.jpeg_quality = jpeg_quality;
  config.fb_count = 2;

  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println("Camera init failed!");
    while(true); // stop here if camera init fails
  } else {
    Serial.println("Camera init success");
  }
}

// ==================== Adaptive Video Function ====================
void adaptVideo(float latency) {
  last_latency = latency;

  // Cap latency to avoid huge jumps
  if (latency > 1000) latency = 1000;

  // Map latency (ms) to range %
  // 20ms = close (100%), 300ms+ = far (0%)
  range_percent = map(constrain(latency, 20, 300), 20, 300, 100, 0);
  range_percent = constrain(range_percent, 0, 100);

  // Adjust JPEG quality: higher when close
  jpeg_quality = map(range_percent, 0, 100, 10, 35);
  jpeg_quality = constrain(jpeg_quality, 10, 63);

  // Adjust FPS: higher when close
  fps = map(range_percent, 0, 100, 5, 30);
  fps = constrain(fps, 5, 30);

  // Apply to camera
  sensor_t * s = esp_camera_sensor_get();
  s->set_quality(s, jpeg_quality);

  // Serial debug info
  Serial.printf("Latency: %.1f ms | Range: %d%% | FPS: %d | JPEG Quality: %d\n",
                latency, range_percent, fps, jpeg_quality);
}

// ==================== Web UI ====================
String index_html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
<title>ESP32-CAM Adaptive Video</title>
<style>
body{font-family:Arial;text-align:center;}
#rangeBar{width:80%;height:20px;background:#ddd;margin:20px auto;border-radius:10px;}
#fill{width:0%;height:100%;background:green;border-radius:10px;}
</style>
</head>
<body>
<h2>ESP32-CAM Adaptive Video Stream</h2>
<img id="video" src="/stream">
<div id="rangeBar"><div id="fill"></div></div>
<p>Range: <span id="rangePercent">0</span>%</p>
<p>FPS: <span id="fps">0</span>, JPEG Quality: <span id="quality">0</span></p>
<script>
function updateStatus(){
  fetch("/status")
    .then(resp=>resp.json())
    .then(data=>{
      document.getElementById("rangePercent").innerText = data.range;
      document.getElementById("fill").style.width = data.range+"%";
      document.getElementById("fps").innerText = data.fps;
      document.getElementById("quality").innerText = data.quality;
    });
}
setInterval(updateStatus,1000);
</script>
</body>
</html>
)rawliteral";

// ==================== MJPEG Stream ====================
void handleJPGStream() {
  WiFiClient client = server.client();
  client.printf("HTTP/1.1 200 OK\r\nContent-Type: multipart/x-mixed-replace; boundary=frame\r\n\r\n");

  // Ensure camera starts with current adaptive quality
  sensor_t * s = esp_camera_sensor_get();
  s->set_quality(s, jpeg_quality);

  while(client.connected()){
    unsigned long start = millis();
    camera_fb_t * fb = esp_camera_fb_get();
    if(!fb) continue;

    client.printf("--frame\r\nContent-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n", fb->len);
    client.write(fb->buf, fb->len);
    client.print("\r\n");
    esp_camera_fb_return(fb);

    unsigned long end = millis();
    float latency = end - start;

    // Adapt video based on observed latency
    adaptVideo(latency);

    // allow server to handle other requests
    server.handleClient();

    delay(1000/fps);
  }
}

// ==================== Setup ====================
void setup() {
  Serial.begin(115200);
  initCamera();

  // Set initial adaptive values
  adaptVideo(50); // assume initial low latency (~50ms) → start at good quality

  WiFi.softAP(ssid,password);
  Serial.println("AP Started: "+String(ssid));

  server.on("/", HTTP_GET, [](){ server.send(200,"text/html",index_html); });
  server.on("/status", HTTP_GET, [](){
    // always return latest known values
    String json = "{\"range\":"+String(range_percent)+
                  ",\"fps\":"+String(fps)+
                  ",\"quality\":"+String(jpeg_quality)+"}";
    server.send(200,"application/json",json);
  });
  server.on("/stream", HTTP_GET, handleJPGStream);

  server.begin();
  Serial.println("Server started, connect to http://" + WiFi.softAPIP().toString());
}

// ==================== Loop ====================
void loop() {
  server.handleClient(); // keep server responsive
}
